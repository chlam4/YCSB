package com.yahoo.ycsb.tsdb;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Generator of a sequence of time stamps that are the real system time at the
 * time of generation, except that each fetched system time will be used for a
 * specified number of times - to generate and return that specified number of
 * timestamps before a new system time is fetched and used again.
 */
public class RealTimestampGenerator implements TimestampGenerator {
    //
    // The time unit of the timestamps to be generated by this generator
    //
    private final TimeUnit timeUnit;
    //
    // Number of timestamps that would be generated before every refresh 
    //
    private final long refreshCount;
    //
    // The timestamp to be returned/generated
    //
    private long currTimestamp;
    //
    // Number of current timestamps that have been generated
    //
    private final AtomicInteger currCount;

    public RealTimestampGenerator(final TimeUnit timeUnit, final long refreshCount) {
        this.timeUnit = timeUnit;
        this.refreshCount = refreshCount;
        refreshCurrTimestamp();
        currCount = new AtomicInteger();
    }

    /**
     * Refresh the "currTimestamp" as the current system time in the specified time unit.
     */
    private void refreshCurrTimestamp() {
        currTimestamp = timeUnit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);
    }

    @Override
    public long next() {
        if (currCount.getAndIncrement() % refreshCount == 0) {
            refreshCurrTimestamp();
        }
        return currTimestamp;
    }

}
